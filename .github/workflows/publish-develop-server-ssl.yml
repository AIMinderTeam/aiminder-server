name: Publish Develop Server SSL

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  CONTAINER_CONTEXT_PATH: 'docker'
  DOCKERFILE_PATH: 'docker/Dockerfile'
  IMAGE_NAME: 'aiminder-server'
  IMAGE_TAG: 'develop-server'
  EC2_SSH_KEY: ${{ secrets.DEVELOP_EC2_SSH_PRIVATE_KEY }}
  EC2_USER: ${{ secrets.DEVELOP_EC2_SSH_USER }}
  EC2_HOST: ${{ secrets.DEVELOP_EC2_HOST }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  APPLICATION_ENV: ${{ secrets.APPLICATION_ENV }}
  DOMAIN: 'dev.aiminder.click'
  EMAIL: 'nalsm0518@gmail.com'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          touch ./src/main/resources/.env
          echo "${{ env.APPLICATION_ENV }}" > ./src/main/resources/.env

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        run: ./gradlew build --parallel

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Get current date and time in custom format
        run: |
          CURRENT_DATE_TIME=$(date "+%Y%m%d%H%M%S")
          echo "Current date and time is $CURRENT_DATE_TIME"
          echo "CURRENT_DATE_TIME=$CURRENT_DATE_TIME" >> $GITHUB_ENV

      - name: Use current date and time
        run: echo "The date and time in custom format is ${{ env.CURRENT_DATE_TIME }}"

      - name: Build and Push the Docker image and
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTAINER_CONTEXT_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ env.DOCKER_HUB_USERNAME}}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}-${{ env.CURRENT_DATE_TIME }}
          push: true

      - name: Copy Docker SSL Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          source: "docker/*"
          target: "/home/ec2-user/aiminder-deployment/"
          strip_components: 1

      - name: Set execute permission for renewal script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/aiminder-deployment
            chmod +x scripts/renew-cert.sh

      - name: Deploy SSL to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/aiminder-deployment
            
            # Update .env file with new image tag
            if [ ! -f .env ]; then
              echo "DEVELOP_AIMINDER_SERVER_TAG=${{ env.IMAGE_TAG }}-${{ env.CURRENT_DATE_TIME }}" > .env
            else
              if grep -q "^DEVELOP_AIMINDER_SERVER_TAG=" .env; then
                sed -i "s/^DEVELOP_AIMINDER_SERVER_TAG=.*/DEVELOP_AIMINDER_SERVER_TAG=${{ env.IMAGE_TAG }}-${{ env.CURRENT_DATE_TIME }}/" .env
              else
                echo "DEVELOP_AIMINDER_SERVER_TAG=${{ env.IMAGE_TAG }}-${{ env.CURRENT_DATE_TIME }}" >> .env
              fi
            fi
            
            # Create backup of current setup
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml docker-compose.yml.backup
            fi
            
            # Check if SSL certificate exists
            if [ ! -d "./cert/letsencrypt/live/${{ env.DOMAIN }}" ]; then
              echo "SSL certificate not found. Starting initial certificate issuance..."
              
              # Stop existing services
              sudo docker-compose down || true
              
              # Create necessary directories
              mkdir -p cert/webroot cert/letsencrypt
              
              # Issue initial certificate
              echo "Issuing SSL certificate..."
              sudo docker-compose -f docker-compose-certbot-init.yml up --abort-on-container-exit
              sudo docker-compose -f docker-compose-certbot-init.yml down
              
              # Start SSL services
              echo "Starting SSL services..."
              sudo docker-compose -f docker-compose-ssl.yml up -d
            else
              echo "Existing SSL certificate found. Redeploying with SSL configuration..."
              sudo docker-compose -f docker-compose-ssl.yml down || true
              sudo docker-compose -f docker-compose-ssl.yml up -d
            fi
            
            # Verify deployment
            echo "Waiting for services to start..."
            sleep 10
            
            echo "Service status:"
            sudo docker-compose -f docker-compose-ssl.yml ps
            
            echo "SSL certificate status:"
            if [ -d "./cert/letsencrypt/live/${{ env.DOMAIN }}" ]; then
              sudo openssl x509 -in ./cert/letsencrypt/live/${{ env.DOMAIN }}/cert.pem -text -noout | grep -E "(Subject|Not After)"
            else
              echo "SSL certificate directory not found"
            fi